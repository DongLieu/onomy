// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: onomyprotocol/dao/v1/dao.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// FundTreasuryProposal details a dao fund treasury proposal.
type FundTreasuryProposal struct {
	Sender      string                                   `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Title       string                                   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description string                                   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Amount      github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,4,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
}

func (m *FundTreasuryProposal) Reset()      { *m = FundTreasuryProposal{} }
func (*FundTreasuryProposal) ProtoMessage() {}
func (*FundTreasuryProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_763c2cafbce2acfd, []int{0}
}
func (m *FundTreasuryProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FundTreasuryProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FundTreasuryProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FundTreasuryProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FundTreasuryProposal.Merge(m, src)
}
func (m *FundTreasuryProposal) XXX_Size() int {
	return m.Size()
}
func (m *FundTreasuryProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_FundTreasuryProposal.DiscardUnknown(m)
}

var xxx_messageInfo_FundTreasuryProposal proto.InternalMessageInfo

// ExchangeWithTreasuryProposal details a dao exchange with treasury proposal.
type ExchangeWithTreasuryProposal struct {
	Sender      string              `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Title       string              `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description string              `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	CoinsPairs  []CoinsExchangePair `protobuf:"bytes,4,rep,name=coins_pairs,json=coinsPairs,proto3" json:"coins_pairs" yaml:"coins_pairs"`
}

func (m *ExchangeWithTreasuryProposal) Reset()      { *m = ExchangeWithTreasuryProposal{} }
func (*ExchangeWithTreasuryProposal) ProtoMessage() {}
func (*ExchangeWithTreasuryProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_763c2cafbce2acfd, []int{1}
}
func (m *ExchangeWithTreasuryProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExchangeWithTreasuryProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExchangeWithTreasuryProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExchangeWithTreasuryProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExchangeWithTreasuryProposal.Merge(m, src)
}
func (m *ExchangeWithTreasuryProposal) XXX_Size() int {
	return m.Size()
}
func (m *ExchangeWithTreasuryProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_ExchangeWithTreasuryProposal.DiscardUnknown(m)
}

var xxx_messageInfo_ExchangeWithTreasuryProposal proto.InternalMessageInfo

// CoinsExchangePair is an ask/bid coins pair to exchange.
type CoinsExchangePair struct {
	CoinAsk types.Coin `protobuf:"bytes,1,opt,name=coin_ask,json=coinAsk,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"coin_ask"`
	CoinBid types.Coin `protobuf:"bytes,2,opt,name=coin_bid,json=coinBid,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"coin_bid"`
}

func (m *CoinsExchangePair) Reset()         { *m = CoinsExchangePair{} }
func (m *CoinsExchangePair) String() string { return proto.CompactTextString(m) }
func (*CoinsExchangePair) ProtoMessage()    {}
func (*CoinsExchangePair) Descriptor() ([]byte, []int) {
	return fileDescriptor_763c2cafbce2acfd, []int{2}
}
func (m *CoinsExchangePair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CoinsExchangePair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CoinsExchangePair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CoinsExchangePair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoinsExchangePair.Merge(m, src)
}
func (m *CoinsExchangePair) XXX_Size() int {
	return m.Size()
}
func (m *CoinsExchangePair) XXX_DiscardUnknown() {
	xxx_messageInfo_CoinsExchangePair.DiscardUnknown(m)
}

var xxx_messageInfo_CoinsExchangePair proto.InternalMessageInfo

func (m *CoinsExchangePair) GetCoinAsk() types.Coin {
	if m != nil {
		return m.CoinAsk
	}
	return types.Coin{}
}

func (m *CoinsExchangePair) GetCoinBid() types.Coin {
	if m != nil {
		return m.CoinBid
	}
	return types.Coin{}
}

// FundAccountProposal details a dao fund account proposal.
type FundAccountProposal struct {
	Recipient   string                                   `protobuf:"bytes,1,opt,name=recipient,proto3" json:"recipient,omitempty"`
	Title       string                                   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description string                                   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Amount      github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,4,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
}

func (m *FundAccountProposal) Reset()      { *m = FundAccountProposal{} }
func (*FundAccountProposal) ProtoMessage() {}
func (*FundAccountProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_763c2cafbce2acfd, []int{3}
}
func (m *FundAccountProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FundAccountProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FundAccountProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FundAccountProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FundAccountProposal.Merge(m, src)
}
func (m *FundAccountProposal) XXX_Size() int {
	return m.Size()
}
func (m *FundAccountProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_FundAccountProposal.DiscardUnknown(m)
}

var xxx_messageInfo_FundAccountProposal proto.InternalMessageInfo

func init() {
	proto.RegisterType((*FundTreasuryProposal)(nil), "onomyprotocol.dao.v1.FundTreasuryProposal")
	proto.RegisterType((*ExchangeWithTreasuryProposal)(nil), "onomyprotocol.dao.v1.ExchangeWithTreasuryProposal")
	proto.RegisterType((*CoinsExchangePair)(nil), "onomyprotocol.dao.v1.CoinsExchangePair")
	proto.RegisterType((*FundAccountProposal)(nil), "onomyprotocol.dao.v1.FundAccountProposal")
}

func init() { proto.RegisterFile("onomyprotocol/dao/v1/dao.proto", fileDescriptor_763c2cafbce2acfd) }

var fileDescriptor_763c2cafbce2acfd = []byte{
	// 459 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x54, 0x31, 0x6f, 0x13, 0x31,
	0x14, 0x3e, 0x53, 0x08, 0xd4, 0x61, 0xe1, 0x88, 0x50, 0x88, 0x2a, 0x5f, 0x74, 0x0b, 0x19, 0xe0,
	0x4c, 0x60, 0xeb, 0xd6, 0x20, 0x18, 0x98, 0xaa, 0x08, 0x09, 0x89, 0xa5, 0xf2, 0xf9, 0x4c, 0x62,
	0x25, 0xe7, 0x77, 0xb2, 0x9d, 0xa8, 0xf9, 0x07, 0x8c, 0x8c, 0x8c, 0x19, 0x11, 0xbf, 0xa4, 0x63,
	0x47, 0x58, 0x02, 0xba, 0x5b, 0x98, 0xf9, 0x05, 0xc8, 0xbe, 0xa3, 0xa4, 0xc0, 0x48, 0x86, 0x4e,
	0xf6, 0x7b, 0x9f, 0xfd, 0xbd, 0xef, 0x7b, 0xcf, 0x32, 0x26, 0xa0, 0x20, 0x5f, 0x15, 0x1a, 0x2c,
	0x70, 0x98, 0xd3, 0x8c, 0x01, 0x5d, 0x0e, 0xdd, 0x92, 0xf8, 0x5c, 0xd8, 0xb9, 0x84, 0x27, 0x0e,
	0x58, 0x0e, 0x7b, 0x9d, 0x09, 0x4c, 0xc0, 0x27, 0xa9, 0xdb, 0xd5, 0x67, 0x7b, 0x84, 0x83, 0xc9,
	0xc1, 0xd0, 0x94, 0x19, 0x41, 0x97, 0xc3, 0x54, 0x58, 0x36, 0xa4, 0x1c, 0xa4, 0xaa, 0xf1, 0xf8,
	0x0b, 0xc2, 0x9d, 0x17, 0x0b, 0x95, 0xbd, 0xd2, 0x82, 0x99, 0x85, 0x5e, 0x1d, 0x6b, 0x28, 0xc0,
	0xb0, 0x79, 0x78, 0x0f, 0xb7, 0x8c, 0x50, 0x99, 0xd0, 0x5d, 0xd4, 0x47, 0x83, 0xfd, 0x71, 0x13,
	0x85, 0x1d, 0x7c, 0xc3, 0x4a, 0x3b, 0x17, 0xdd, 0x6b, 0x3e, 0x5d, 0x07, 0x61, 0x1f, 0xb7, 0x33,
	0x61, 0xb8, 0x96, 0x85, 0x95, 0xa0, 0xba, 0x7b, 0x1e, 0xdb, 0x4e, 0x85, 0x1c, 0xb7, 0x58, 0x0e,
	0x0b, 0x65, 0xbb, 0xd7, 0xfb, 0x7b, 0x83, 0xf6, 0x93, 0xfb, 0x49, 0xad, 0x2c, 0x71, 0xca, 0x92,
	0x46, 0x59, 0xf2, 0x0c, 0xa4, 0x1a, 0x3d, 0x3e, 0xdb, 0x44, 0xc1, 0xa7, 0xaf, 0xd1, 0x60, 0x22,
	0xed, 0x74, 0x91, 0x26, 0x1c, 0x72, 0xda, 0xd8, 0xa8, 0x97, 0x47, 0x26, 0x9b, 0x51, 0xbb, 0x2a,
	0x84, 0xf1, 0x17, 0xcc, 0xb8, 0xa1, 0x3e, 0xbc, 0xfd, 0x6e, 0x1d, 0x05, 0x1f, 0xd6, 0x51, 0xf0,
	0x7d, 0x1d, 0x05, 0x71, 0x89, 0xf0, 0xc1, 0xf3, 0x53, 0x3e, 0x65, 0x6a, 0x22, 0x5e, 0x4b, 0x3b,
	0xdd, 0xb9, 0xc7, 0x0c, 0xb7, 0x5d, 0x6b, 0xcd, 0x49, 0xc1, 0xa4, 0x36, 0x8d, 0xd1, 0x07, 0xc9,
	0xbf, 0xc6, 0x55, 0x0b, 0xff, 0xa5, 0xee, 0x98, 0x49, 0x3d, 0xea, 0x39, 0xdb, 0x3f, 0x36, 0x51,
	0xb8, 0x62, 0xf9, 0xfc, 0x30, 0xde, 0x62, 0x8a, 0xc7, 0xd8, 0x47, 0xee, 0x98, 0xf9, 0xc3, 0x64,
	0x85, 0xf0, 0x9d, 0xbf, 0xb8, 0xc2, 0xb7, 0xf8, 0x96, 0xbb, 0x71, 0xc2, 0xcc, 0xcc, 0x7b, 0xfb,
	0xcf, 0xfd, 0xbe, 0xe9, 0xc8, 0x8f, 0xcc, 0xec, 0xa2, 0x4e, 0x2a, 0x33, 0xdf, 0xac, 0x5d, 0xd4,
	0x19, 0xc9, 0x2c, 0xde, 0x20, 0x7c, 0xd7, 0x3d, 0xd3, 0x23, 0xce, 0xdd, 0xa0, 0x2f, 0x26, 0x78,
	0x80, 0xf7, 0xb5, 0xe0, 0xb2, 0x90, 0x42, 0xd9, 0x66, 0x88, 0xbf, 0x13, 0x57, 0xe8, 0xad, 0x8e,
	0x5e, 0x7e, 0x2c, 0x09, 0x3a, 0x2b, 0x09, 0x3a, 0x2f, 0x09, 0xfa, 0x56, 0x12, 0xf4, 0xbe, 0x22,
	0xc1, 0x79, 0x45, 0x82, 0xcf, 0x15, 0x09, 0xde, 0x3c, 0xdc, 0x62, 0xbf, 0xfc, 0x39, 0x68, 0x61,
	0x84, 0x5e, 0x0a, 0x7a, 0xea, 0xbf, 0x09, 0x5f, 0x27, 0x6d, 0x79, 0xf4, 0xe9, 0xcf, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xe9, 0x42, 0xe6, 0xca, 0x48, 0x04, 0x00, 0x00,
}

func (this *CoinsExchangePair) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CoinsExchangePair)
	if !ok {
		that2, ok := that.(CoinsExchangePair)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CoinAsk.Equal(&that1.CoinAsk) {
		return false
	}
	if !this.CoinBid.Equal(&that1.CoinBid) {
		return false
	}
	return true
}
func (m *FundTreasuryProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FundTreasuryProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FundTreasuryProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDao(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintDao(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintDao(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintDao(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExchangeWithTreasuryProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExchangeWithTreasuryProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExchangeWithTreasuryProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CoinsPairs) > 0 {
		for iNdEx := len(m.CoinsPairs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CoinsPairs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDao(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintDao(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintDao(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintDao(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CoinsExchangePair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CoinsExchangePair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CoinsExchangePair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.CoinBid.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDao(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.CoinAsk.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDao(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *FundAccountProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FundAccountProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FundAccountProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDao(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintDao(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintDao(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintDao(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDao(dAtA []byte, offset int, v uint64) int {
	offset -= sovDao(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FundTreasuryProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovDao(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovDao(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovDao(uint64(l))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovDao(uint64(l))
		}
	}
	return n
}

func (m *ExchangeWithTreasuryProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovDao(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovDao(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovDao(uint64(l))
	}
	if len(m.CoinsPairs) > 0 {
		for _, e := range m.CoinsPairs {
			l = e.Size()
			n += 1 + l + sovDao(uint64(l))
		}
	}
	return n
}

func (m *CoinsExchangePair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CoinAsk.Size()
	n += 1 + l + sovDao(uint64(l))
	l = m.CoinBid.Size()
	n += 1 + l + sovDao(uint64(l))
	return n
}

func (m *FundAccountProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovDao(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovDao(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovDao(uint64(l))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovDao(uint64(l))
		}
	}
	return n
}

func sovDao(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDao(x uint64) (n int) {
	return sovDao(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FundTreasuryProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDao
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FundTreasuryProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FundTreasuryProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDao
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDao
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDao
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDao
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDao
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDao
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDao
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDao
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDao
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDao
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDao
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDao
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDao(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDao
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExchangeWithTreasuryProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDao
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExchangeWithTreasuryProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExchangeWithTreasuryProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDao
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDao
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDao
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDao
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDao
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDao
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDao
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDao
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDao
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinsPairs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDao
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDao
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDao
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoinsPairs = append(m.CoinsPairs, CoinsExchangePair{})
			if err := m.CoinsPairs[len(m.CoinsPairs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDao(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDao
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CoinsExchangePair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDao
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CoinsExchangePair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CoinsExchangePair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinAsk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDao
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDao
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDao
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CoinAsk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinBid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDao
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDao
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDao
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CoinBid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDao(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDao
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FundAccountProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDao
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FundAccountProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FundAccountProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDao
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDao
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDao
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDao
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDao
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDao
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDao
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDao
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDao
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDao
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDao
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDao
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDao(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDao
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDao(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDao
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDao
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDao
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDao
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDao
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDao
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDao        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDao          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDao = fmt.Errorf("proto: unexpected end of group")
)
